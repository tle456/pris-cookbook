@Grab('com.github.groovy-wslite:groovy-wslite:1.1.3')
@Grab('org.codehaus.groovy.modules.http-builder:http-builder:0.7' )

import org.opennms.pris.model.*
import wslite.rest.RESTClient
import wslite.rest.RESTClientException
import static groovyx.net.http.ContentType.URLENC
import groovyx.net.http.HttpResponseException

import java.nio.file.*


File file = new File("out.txt")
file.append("======1 " + instance + "\n")

Requisition requisition = new Requisition()
path = instance


def token = getToken()
if (token?.trim()) {
    def response = getRequisitionData(path, token, file)
 
    if (response){
        def idx = -1
        def prevNodeId = 0
        def prevNode = 0
        def start = false
        for (def mapData in response) {
            idx = idx + 1

            requiNode = buildRequisitionNode( mapData, path, file)
            if (requiNode) {
                if (mapData["nodeId"] == prevNodeId) {
                    requiNode.getInterfaces().addAll(prevNode.getInterfaces())
                } 
                if (mapData["nodeId"] != prevNodeId) {
                    if (start == true) {
                        requisition.getNodes().add(prevNode)
                    }
                    
                    if (prevNodeId == 0) {
                        start = !start
                        requisition.setForeignSource(path)
                    }
                }

                prevNodeId = mapData["nodeId"]
                prevNode = requiNode
                if(idx == response.size() -1) {
                    requisition.getNodes().add(requiNode)
                }
            }

        }

    }
}

return requisition

//-------------------------------------------------------------

def String getToken() {
    def baseUrl = "https://auth.onguard.convergeone.com"
    def basePath = "/realms/DEV/protocol/openid-connect/token"

    try{
        def client = new groovyx.net.http.RESTClient(baseUrl)
        def params = [client_id:'onguard-tools',username:'john',password:'tester1',grant_type:'password']

        def response = client.post(path: basePath,
                        requestContentType: URLENC,
                        body: params)

        if (response.responseData && response.responseData.size() > 0 ) {
            return response.responseData['access_token']
        }

    } catch(HttpResponseException ex) {
       logger.debug ("Error: ${ex.message}")
    }
    return ''
}

def List getRequisitionData(String path, String token, File file) {
    def Boolean isSharedSite = path.contains("@")
        def baseUrl = "https://onguard-ci-dev.onguard.convergeone.com/api/modelImports/"

    if (!isSharedSite) {
       def siteId = config.getString("site")
       if (siteId == null) {
         return []
       }
        path = path + "@" + siteId 
    }    

    try {
        file.append("===============start getRequisitionData URL=" + baseUrl + path + "\n")
        def client = new groovyx.net.http.RESTClient(baseUrl + path )

        client.setHeaders(["Authorization" : "Bearer ${token}"])

        response = client.get([:])

        return response.responseData

    } catch (RESTClientException ex) {
       logger.debug ("Error: ${ex.message}")
       return []
    }
}

def RequisitionNode buildRequisitionNode (mapData, path, file) {
    def isSingleSite = !path.contains("@")

    RequisitionNode requisitionNode = new RequisitionNode()
    if (mapData["node"]) {
        requisitionNode.setNodeLabel(mapData["node"] )
    }

    if (mapData["foreignId"]) {
        def foreignId = mapData["foreignId"]
        if (mapData["regionLabel"]) {
            foreignId = isSingleSite ? foreignId : (mapData["regionLabel"] + "-" + foreignId)
        }
        requisitionNode.setForeignId(foreignId)
    }

    if (mapData["regionLabel"]) {
        requisitionNode.setLocation(mapData["regionLabel"])
    }


    // IP interfaces
    List<RequisitionInterface> interfaceList = new ArrayList<RequisitionInterface>()
    RequisitionInterface requisitionInterface = new RequisitionInterface()
    if ( mapData["ipAddress"]) {
        requisitionInterface.setIpAddr(mapData["ipAddress"])
        requisitionInterface.setStatus(1);
        requisitionInterface.setManaged(true);
        if (mapData["prime"]) {
            requisitionInterface.setSnmpPrimary(PrimaryType.PRIMARY)
        }

        if (mapData["services"]){
            List<RequisitionMonitoredService> monitoredServiceList = new ArrayList<RequisitionMonitoredService>()
            servStr = mapData["services"]
            for (def servItem in servStr.split(",")) {
                monitoredServiceList.add(new RequisitionMonitoredService().withServiceName(servItem))
            }
            requisitionInterface.getMonitoredServices().addAll(monitoredServiceList)        
        }
    }
    interfaceList.add(requisitionInterface)
    requisitionNode.getInterfaces().addAll(interfaceList)

    List<RequisitionCategory> categoryList = new ArrayList<RequisitionCategory>()
    try {
        if (mapData["category"]) {
            catStr = mapData["category"]
            for (def catItem in catStr.split(",")) {
                RequisitionCategory requisitionCategory = new RequisitionCategory()
                requisitionCategory.setName(catItem)
                categoryList.add(requisitionCategory)
            }
        }
        requisitionNode.getCategories().addAll(categoryList)
    } catch( MissingPropertyException ex) {
        logger.debug ("Error: ${ex.message}")
    }


    // Asset variables
    List<MetaData> metaDatas = new ArrayList<MetaData>()
    def elemList = ["node", "nodeId", "foreignId", "interfaceId", "regionLabel", "monSite", "ipAddress", "prime", "services", "category", "requisitionType"]
    List<RequisitionAsset> assetList = new ArrayList<RequisitionAsset>()
    mapData.each { key, val ->
        if (!elemList.contains(key)) {
            def RequisitionAsset asset = null
            if (key && val) {
                switch(key) { 
                    case "description": 
                        asset = new RequisitionAsset()
                        asset.setName(key)
                        asset.setValue(val)
                        assetList.add(asset)
                        break
                    case "address1": 
                        asset = new RequisitionAsset()
                        asset.setName(key)
                        asset.setValue(val)
                        assetList.add(asset)
                        break
                    case "address2": 
                        asset = new RequisitionAsset()
                        asset.setName(key)
                        asset.setValue(val)
                        assetList.add(asset)
                        break
                    case "city": 
                        asset = new RequisitionAsset()
                        asset.setName(key)
                        asset.setValue(val)
                        assetList.add(asset)
                        break
                    case "state": 
                        asset = new RequisitionAsset()
                        asset.setName(key)
                        asset.setValue(val)
                        assetList.add(asset)
                        break
                    case "zip": 
                        asset = new RequisitionAsset()
                        asset.setName(key)
                        asset.setValue(val)
                        assetList.add(asset)
                        break
                    case "country": 
                        asset = new RequisitionAsset()
                        asset.setName(key)
                        asset.setValue(val)
                        assetList.add(asset)
                        break
                    case "modelNumber": 
                        asset = new RequisitionAsset()
                        asset.setName(key)
                        asset.setValue(val)
                        assetList.add(asset)
                        break
                    case "serialNumber": 
                        asset = new RequisitionAsset()
                        asset.setName(key)
                        asset.setValue(val)
                        assetList.add(asset)
                        break
                    default:
                        if (val != null) {
                            metaDatas.add(new MetaData("requisition", key, val))
                        }
                }
            }        
        }
    }
    requisitionNode.getAssets().addAll(assetList)
    if (!metaDatas.isEmpty()) {
        requisitionNode.getMetaDatas().addAll(metaDatas)
    }


    return requisitionNode
}

