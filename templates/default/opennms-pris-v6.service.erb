#!/bin/bash
#
# opennms-pris          Start up the OpenNMS Provisioning Integration Server
#
# chkconfig: 2345 55 25
# description: opennms-pris is a the OpenNMS integration server for provisioning. \
#              This service starts up the opennms-pris server daemon.
#
# author: ronny@opennms.org
# processname: opennms-pris
# pidfile: /var/run/opennms-pris.pid

### BEGIN INIT INFO
# Provides: opennms-pris
# Required-Start: $local_fs $network
# Required-Stop: $local_fs
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Start up the opennms-pris server daemon
# Description:       OpenNMS Provisioning Integration Server provides interfaces. \
#                    to import node information from inventories or other external
#                    datasources into OpenNMS using Provisiond.
### END INIT INFO

# Set debug on
# set -x

# Set Java home environment to use
JAVA_BIN="/usr/bin/java"

NAME="opennms-pris"

PROG="opennms-pris.jar"
PROG_DIR="/opt/opennms-pris"
PROG_MAIN="org.opennms.pris.Starter"

PID_FILE="/var/run/opennms-pris.pid"

# Log file and directory
LOG_DIR="/var/log"
LOG_FILE="${LOG_DIR}/opennms-pris.log"

# Some sanitychecks for the required Java environment and installation path
if [ ! -x "${JAVA_BIN}" ]; then
  echo "error: the Java binary in ${JAVA_BIN} does not exist or is not executable."
  echo "the ${NAME}-daemon script could not be started."
  exit 2
fi

if [ ! -d "${PROG_DIR}" ]; then
   echo "Could not find directory for ${NAME}-daemon"
   echo "Please check if you have installed the program correctly to ${NAME}"
   exit 3
fi

if [ ! -d "${PROG_DIR}/lib" ]; then
   echo "Could not find library directory for ${NAME}-daemon"
   echo "Please check if you have installed the program correctly to ${NAME}"
   exit 3
fi

# Start: check if the daemon is already running
#
# if (running(PID_FILE)) {
#   exit with error
# } else {
#   start daemon
#   write pid file
#   exit
# }
start() {
   echo -n "Starting ${NAME}: "
   if [ -f "${PID_FILE}" ] && [ "$(cat ${PID_FILE})" != "" ]; then
      echo "FAILED"
      echo "${NAME}-daemon with process id: $(cat ${PID_FILE}) already running."
      exit 4
   else
      cd ${PROG_DIR}
      ${JAVA_BIN} -cp ${PROG_DIR}/lib/*:${PROG_DIR}/${PROG} ${PROG_MAIN} &>${LOG_FILE} &
      if [ ! $? -eq 0 ]; then
        echo "FAILED"
        exit 5
      fi
      echo "$!" > ${PID_FILE}
      if [ $? -eq 0 ]; then
        echo "Ok"
      else
        echo "FAILED"
        exit 6
      fi
   fi
}

# Stop: check if the daemon is already running
#
# if (running(PID_FILE)) {
#   stop daemon by pid
#   cleanup pid file
#   exit 0
# } else {
#   not running nothing to do
#   exit
# }
stop() {
  echo -n "Stop ${NAME}: "
  if [ -f ${PID_FILE} ]; then
    kill -15 $(cat ${PID_FILE}) &>/dev/null
    if [ $? -eq 0 ]; then
      echo "Ok"
      rm ${PID_FILE}
      exit 0
    else
      echo "FAILED"
      echo "Could not stop ${NAME} with PID: $(cat ${PID_FILE})"
      rm ${PID_FILE}
      exit 7
    fi
  else
    echo "FAILED"
    echo "No PID file ${PID_FILE} for ${NAME} found"
    exit 8
  fi
}

status() {
  echo -n "Status ${NAME} "
  PID=$(pgrep -f ${PROG})
  if [ $? -eq 0 ]; then
    echo "is running with PID ${PID}"
    exit 0
  else
    echo "is not running"
    exit 9
  fi
}

case $1 in
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    status
    ;;
  *)
    echo "usage"
    exit 1
    ;;
esac

